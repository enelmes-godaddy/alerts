"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _linaria = require("linaria");
var _intentsConfig = _interopRequireDefault(require("./intents.config.js"));
var _options = _interopRequireDefault(require("./options"));
const UX_SPACE_PADDING_SIZE = '--uxSpace--padding-size';
const UX_SPACE_GAP_SIZE = '--uxSpace--gap-size';
const UX_SPACE_PADDING_ADJUSTMENT = '--uxSpace--padding-adjustment';
const UX_SPACE_GAP_ADJUSTMENT = '--uxSpace--gap-adjustment';

/**
 * Creates size variations based on UX_SPACE_AS options
 *
 * @param {String} as - One of the possible options from UX_SPACE_AS
 * @returns {String} - a CSS declaration related to a possible option from UX_SPACE_AS
 */
function createSize(as) {
  return `
    &.ux-space--as-${as} {
      ${UX_SPACE_PADDING_SIZE}: calc(
        ${_intentsConfig.default.uxSpace[as].paddingFactor} * 
        ${_intentsConfig.default.ux.box.density} * 
        var(${UX_SPACE_PADDING_ADJUSTMENT}, 1)
      );
      ${UX_SPACE_GAP_SIZE}: calc(
        ${_intentsConfig.default.uxSpace[as].gapFactor} *
        ${_intentsConfig.default.ux.box.density} *
        var(${UX_SPACE_GAP_ADJUSTMENT}, 1)
      );
    }
  `;
}

/**
 * Creates dimension variations (inline & block)
 *
 * @param {String} dim - A CSS logical dimension
 * @returns {String} - a CSS declaration related to a CSS logical dimension
 */
function createDimension(dim) {
  return `
    &.ux-space--${dim} {
      &:empty {
        /** Container has no children, apply as spacer-gif */
        display: inline-flex;
        ${dim}-size: var(${UX_SPACE_PADDING_SIZE});
      }

      &:not(:empty) {
        /** Container has children, apply as padding */
        padding-${dim}: var(${UX_SPACE_PADDING_SIZE});
      }
    }
  `;
}
var _default = "s2h4jrs";
exports.default = _default;