import React from 'react';
import PropTypes from 'prop-types';
import spaceClasses from './classes';
import asOptions from './options';

/**
 * Creates a function which represents a dynamic React component
 *
 * @param {String} TagName - The tag name of the element to use for space
 * @returns {Function} - A function to create a component
 */
function create(TagName) {

  /**
   * Creates a React component using the given tag name
   *
   * @param {Object} props - A props configuration object
   * @param {String} props.as - Determines the density of the component and its children
   * @param {String} [props.className] - A class name to include
   * @param {Node} [props.children] - Children
   * @param {Boolean} [props.inline] - Include space in the horizontal direction
   * @param {Boolean} [props.block] - Include space in the vertical direction
   * @param {Boolean} [props.gap] - Include space in between child elements
   * @param {Object} ref - Element reference
   * @returns {React.Component} - A functional React component
   */
  const Space = React.forwardRef(function Space(props, ref) {
    const {
      as,
      className,
      children,
      inline,
      block,
      gap,
      ...rest
    } = props || {};

    return (
      <TagName
        className={ spaceClasses({ as, className, inline, block, gap }) }
        ref={ ref }
        { ...rest }>
        { children }
      </TagName>
    );
  });

  /**
   *
   * @enum {Object} expected types of properties.
   * @public
   */
  Space.propTypes = {
    /** Determines the density of the component and its children */
    as: PropTypes.oneOf(Object.values(asOptions)).isRequired,
    /** Children for the component */
    children: PropTypes.node,
    /** Classes to apply to component */
    className: PropTypes.string,
    /** Include space in the horizontal direction */
    inline: PropTypes.bool,
    /** Include space in the vertical direction */
    block: PropTypes.bool,
    /** Include space in between child elements */
    gap: PropTypes.bool
  };

  return Space;
}

export const space = new Proxy(function () {}, {
  get: function get(target, prop) {
    // Deliberately not using hasOwnProperty to catch things like __proto__
    if (!String(prop).startsWith('_') && typeof target[prop] === 'undefined') {
      // Cache access by creating a key with value
      target[prop] = create(prop);
    }
    // Always return thing at that key, either undefined or thing set
    return Reflect.get(...arguments);
  }
});

export default space;
export { asOptions };

