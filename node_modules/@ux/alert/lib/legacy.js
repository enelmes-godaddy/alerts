"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transform = transform;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _text = _interopRequireDefault(require("@ux/text"));
const _excluded = ["title", "button", "actions"];
/* eslint-disable no-console */
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Converts the legacy configuration object into props for <Dialog/>
 *
 * @param {Object} config - Configuration object
 * @param {String|Node} - Title of the alert
 * @param {Component} button - Legacy container for the alert
 * @param {Component} actions - New actions for the alert
 * @returns {Object} - A converted props object for <Dialog/>
 */

function transform(config) {
  const {
      title,
      button,
      actions
    } = config,
    rest = (0, _objectWithoutProperties2.default)(config, _excluded);
  warn(config);
  return _objectSpread({
    title: typeof title === 'string' ? /*#__PURE__*/_react.default.createElement(_text.default.h2, {
      text: title,
      as: "title"
    }) : title,
    actions: button || actions
  }, rest);
}
const warnings = new Set();

/**
 * Warns when the shim is used
 *
 * @param {Object} props - Configuration object
 * @param {Component} button - Legacy container for the alert
 */
function warn(props) {
  const {
    button
  } = props;
  if (button) {
    const warning = 'Prop `button` for <Alert/> will be removed in v2201, please replace with `actions`';
    !warnings.has(warning) && warnings.add(warning) && console.warn(warning);
  }
}