{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.svgosm = exports.default = exports.SVGOSM = void 0;\nconst _excluded = [\"viewBox\", \"title\", \"desc\", \"shapes\"];\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n/**\n * Our default root element.\n *\n * @type {DOMElement|Null}\n * @private\n */\nconst html = typeof document !== 'undefined' ? document.body || document.documentElement : null;\n\n/**\n * SVG Object Storage Manager (SVGOSM) attempts to reduce the SVG DOM footprint\n * by moving all SVG objects into symbols so they can be re-used without having\n * to inject the full SVG structure in multiple places.\n *\n * @class\n * @param {String} name Name, id of the container to inject.\n * @public\n */\nclass SVGOSM {\n  constructor(name, root = html) {\n    this.id = name; // Name of the container.\n    this.tracker = {}; // Storage tracker to reduce DOM lookup.\n    this.mounted = []; // List of all roots we need to operate in.\n    this.root = root;\n  }\n\n  /**\n   * Inject a new SVG element into a given root that is going to be used as\n   * storage for all our new symbols so they can be referenced in our HTML.\n   *\n   * @param {DOMElement} root Container we need to mount in.\n   * @public\n   */\n  mount(root) {\n    if (!root) return;\n    const container = document.createElement('div');\n    container.style = 'display:none';\n    container.id = this.id;\n    const svg = document.createElementNS(SVGOSM.xmlns, 'svg');\n    container.appendChild(svg);\n    root.appendChild(container);\n    this.mounted.push({\n      svg,\n      root,\n      container\n    });\n\n    //\n    // Populate with other discovered icons.\n    //\n    Object.keys(this.tracker).forEach(key => {\n      svg.innerHTML += this.tracker[key].sym;\n    });\n  }\n\n  /**\n   * Extract information out the CSS of a given HTML element and extract the svg\n   * content and the size of the element.\n   *\n   * @param {String} name Name of the CSS variable we need to extract.\n   * @returns {Object|Undefined} The resulting information.\n   * @public\n   */\n  extract(name) {\n    if (!name) return;\n    let match;\n    if (this.root) {\n      this.mount(this.root);\n      this.root = null;\n    }\n    this.mounted.some(function search({\n      container\n    }) {\n      if (!window) return !!match;\n      const style = window.getComputedStyle(container, ':before');\n      const cssvar = name.startsWith('--') ? name : `--${name}`;\n      const cssvarvalue = style.getPropertyValue(cssvar);\n      let content = style.getPropertyValue('content');\n\n      //\n      // BLACK MAGIC WARNING: The following blocks provide the following:\n      //\n      // - Provide backwards compatibility to content: url(svg)\n      // - Bail out of old font based content: \"\\char\" properties\n      // - Prefer cssvariable values over old content: url() as they can\n      //   be overridden for white labels.\n      //\n      // The big problem here is that `content` can really be anything, it can\n      // be `none`, it can be `''`, even `normal` when nothing is assigned to it\n      // depending on the element it receives. So we need to figure out _when_\n      // to bail out.\n      //\n      // Browsers also handle reading out the `content` property differently,\n      // literally all over the place. Some encode the content, include the\n      // quotes that are wrapped around the content, others just include the\n      // actual string. So, we just want to normalize this to what ever we want\n      // to validate against, which is a single character.\n      //\n      if (content.length === 3) content = content.charAt(1);\n      if (content) {\n        if (content.includes('svg')) {\n          match = content;\n        } else if (content.length === 1 && !/[a-z\\d]/i.test(content)) {\n          //\n          // The contents of icon fonts would be a unicode wrapped in quotes. So\n          // if it's 3 chars length (not binary size), and the 2nd character is\n          // not alphabetical or a number, it must be unicde char and we should\n          // proceed to **not** transform anything here.\n          //\n          return !!match;\n        }\n      }\n\n      //\n      // If a CSS variable is defined it should always be used as SVG contents.\n      // When we found absolutely nothing at this point, bail out.\n      //\n      if (cssvarvalue && cssvarvalue.includes('svg')) match = cssvarvalue;\n      return !!match;\n    });\n    if (!match) return;\n    return this.parse(match);\n  }\n\n  /**\n   * Parses the given SVG string and extracts contents.\n   *\n   * @param {String} str The encoded SVG string.\n   * @returns {Object} Parsed SVG result.\n   * @private\n   */\n  parse(str) {\n    if (!~str.indexOf('svg')) return {};\n    str = decodeURI(str).replace(/%23/g, '#').replace(/\\\\\"/g, '\"');\n    const start = str.indexOf('>');\n    const finish = str.indexOf('</svg>');\n    const result = /viewBox=.*?([\\d\\s.]+)/.exec(str.substr(0, start));\n    if (!result) return {};\n    return {\n      shapes: str.slice(start + 1, finish),\n      viewBox: result[1]\n    };\n  }\n\n  /**\n   * Returns the correct reference to the object.\n   *\n   * @param {String} name The name of the object we want to use.\n   * @param {Function} [fn] Sets the value if there isn't any.\n   * @returns {Object|Null} The value that should be used in the `xlink:href` attr.\n   * @public\n   */\n  get(name, fn) {\n    const res = this.tracker[name];\n    if (res || !fn) return res;\n    this.set(name, fn(name));\n    return this.tracker[name];\n  }\n\n  /**\n   * Store a new Symbol in our managed SVG object.\n   *\n   * @param {String} name Name of the symbol.\n   * @param {Object} data Detailed information about the symbol.\n   * @param {String} data.viewBox The viewBox of the symbol.\n   * @param {String} data.title Title of the symbol.\n   * @param {String} data.desc Description of the symbol.\n   * @param {String} data.shapes The actual symbol that need to be stored.\n   * @returns {Boolean} Indication if the shape was inserted.\n   * @public\n   */\n  sym(name, _ref = {}) {\n    let {\n        viewBox,\n        title,\n        desc,\n        shapes\n      } = _ref,\n      data = _objectWithoutProperties(_ref, _excluded);\n    if (!shapes) return false;\n    const uid = this.uid(name);\n    const a11ytitle = title ? `<title id=\"${uid}-title\">${title}</title>` : '';\n    const a11ydesc = desc ? `<desc id=\"${uid}-desc\">${desc}</desc>` : '';\n    const sym = `<symbol id=\"${uid}\" viewBox=\"${viewBox}\">${a11ytitle}${a11ydesc}${shapes}</symbol>`;\n    this.tracker[name] = _objectSpread(_objectSpread({}, data), {}, {\n      link: `#${uid}`,\n      viewBox,\n      sym\n    });\n    return sym;\n  }\n\n  /**\n   * Gets an HTML ID prefix for a given icon name.\n   *\n   * @param {String} name Name of the icon.\n   * @returns {String} The HTML ID prefix.\n   * @public\n   */\n  uid(name) {\n    return `${this.id}-${name}`;\n  }\n\n  /**\n   * Store a new Symbol in our managed SVG object.\n   *\n   * @param {String} name Name of the symbol.\n   * @param {Object} data Detailed information about the symbol.\n   * @returns {Boolean} Indication if the shape was inserted.\n   * @public\n   */\n  set(name, data) {\n    const sym = this.sym(name, data);\n    if (!sym) return false;\n    if (this.root) {\n      this.mount(this.root);\n      this.root = null;\n    }\n    this.mounted.forEach(({\n      svg\n    }) => {\n      svg.innerHTML += sym;\n    });\n    return true;\n  }\n}\n\n/**\n * The XML namespace.\n *\n * @type {String}\n * @private\n */\nexports.SVGOSM = exports.default = SVGOSM;\nSVGOSM.xmlns = 'http://www.w3.org/2000/svg';\n\n/**\n * Pre-create an instance.\n *\n * @type {SVGOSM}\n * @public\n */\nconst svgosm = new SVGOSM('svg-container');\nexports.svgosm = svgosm;","map":{"version":3,"names":["Object","defineProperty","exports","value","svgosm","default","SVGOSM","_excluded","ownKeys","e","r","t","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","key","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","i","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","sourceKeys","html","document","body","documentElement","constructor","name","root","id","tracker","mounted","mount","container","createElement","style","svg","createElementNS","xmlns","appendChild","innerHTML","sym","extract","match","some","search","window","getComputedStyle","cssvar","startsWith","cssvarvalue","getPropertyValue","content","charAt","includes","test","parse","str","decodeURI","replace","start","finish","result","exec","substr","shapes","slice","viewBox","get","fn","set","_ref","title","desc","data","uid","a11ytitle","a11ydesc","link"],"sources":["/Users/enelmes/Code/enelmes-godaddy/alerts-local/node_modules/@ux/icon/svgosm.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.svgosm = exports.default = exports.SVGOSM = void 0;\nconst _excluded = [\"viewBox\", \"title\", \"desc\", \"shapes\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/**\n * Our default root element.\n *\n * @type {DOMElement|Null}\n * @private\n */\nconst html = typeof document !== 'undefined' ? document.body || document.documentElement : null;\n\n/**\n * SVG Object Storage Manager (SVGOSM) attempts to reduce the SVG DOM footprint\n * by moving all SVG objects into symbols so they can be re-used without having\n * to inject the full SVG structure in multiple places.\n *\n * @class\n * @param {String} name Name, id of the container to inject.\n * @public\n */\nclass SVGOSM {\n  constructor(name, root = html) {\n    this.id = name; // Name of the container.\n    this.tracker = {}; // Storage tracker to reduce DOM lookup.\n    this.mounted = []; // List of all roots we need to operate in.\n    this.root = root;\n  }\n\n  /**\n   * Inject a new SVG element into a given root that is going to be used as\n   * storage for all our new symbols so they can be referenced in our HTML.\n   *\n   * @param {DOMElement} root Container we need to mount in.\n   * @public\n   */\n  mount(root) {\n    if (!root) return;\n    const container = document.createElement('div');\n    container.style = 'display:none';\n    container.id = this.id;\n    const svg = document.createElementNS(SVGOSM.xmlns, 'svg');\n    container.appendChild(svg);\n    root.appendChild(container);\n    this.mounted.push({\n      svg,\n      root,\n      container\n    });\n\n    //\n    // Populate with other discovered icons.\n    //\n    Object.keys(this.tracker).forEach(key => {\n      svg.innerHTML += this.tracker[key].sym;\n    });\n  }\n\n  /**\n   * Extract information out the CSS of a given HTML element and extract the svg\n   * content and the size of the element.\n   *\n   * @param {String} name Name of the CSS variable we need to extract.\n   * @returns {Object|Undefined} The resulting information.\n   * @public\n   */\n  extract(name) {\n    if (!name) return;\n    let match;\n    if (this.root) {\n      this.mount(this.root);\n      this.root = null;\n    }\n    this.mounted.some(function search({\n      container\n    }) {\n      if (!window) return !!match;\n      const style = window.getComputedStyle(container, ':before');\n      const cssvar = name.startsWith('--') ? name : `--${name}`;\n      const cssvarvalue = style.getPropertyValue(cssvar);\n      let content = style.getPropertyValue('content');\n\n      //\n      // BLACK MAGIC WARNING: The following blocks provide the following:\n      //\n      // - Provide backwards compatibility to content: url(svg)\n      // - Bail out of old font based content: \"\\char\" properties\n      // - Prefer cssvariable values over old content: url() as they can\n      //   be overridden for white labels.\n      //\n      // The big problem here is that `content` can really be anything, it can\n      // be `none`, it can be `''`, even `normal` when nothing is assigned to it\n      // depending on the element it receives. So we need to figure out _when_\n      // to bail out.\n      //\n      // Browsers also handle reading out the `content` property differently,\n      // literally all over the place. Some encode the content, include the\n      // quotes that are wrapped around the content, others just include the\n      // actual string. So, we just want to normalize this to what ever we want\n      // to validate against, which is a single character.\n      //\n      if (content.length === 3) content = content.charAt(1);\n      if (content) {\n        if (content.includes('svg')) {\n          match = content;\n        } else if (content.length === 1 && !/[a-z\\d]/i.test(content)) {\n          //\n          // The contents of icon fonts would be a unicode wrapped in quotes. So\n          // if it's 3 chars length (not binary size), and the 2nd character is\n          // not alphabetical or a number, it must be unicde char and we should\n          // proceed to **not** transform anything here.\n          //\n          return !!match;\n        }\n      }\n\n      //\n      // If a CSS variable is defined it should always be used as SVG contents.\n      // When we found absolutely nothing at this point, bail out.\n      //\n      if (cssvarvalue && cssvarvalue.includes('svg')) match = cssvarvalue;\n      return !!match;\n    });\n    if (!match) return;\n    return this.parse(match);\n  }\n\n  /**\n   * Parses the given SVG string and extracts contents.\n   *\n   * @param {String} str The encoded SVG string.\n   * @returns {Object} Parsed SVG result.\n   * @private\n   */\n  parse(str) {\n    if (!~str.indexOf('svg')) return {};\n    str = decodeURI(str).replace(/%23/g, '#').replace(/\\\\\"/g, '\"');\n    const start = str.indexOf('>');\n    const finish = str.indexOf('</svg>');\n    const result = /viewBox=.*?([\\d\\s.]+)/.exec(str.substr(0, start));\n    if (!result) return {};\n    return {\n      shapes: str.slice(start + 1, finish),\n      viewBox: result[1]\n    };\n  }\n\n  /**\n   * Returns the correct reference to the object.\n   *\n   * @param {String} name The name of the object we want to use.\n   * @param {Function} [fn] Sets the value if there isn't any.\n   * @returns {Object|Null} The value that should be used in the `xlink:href` attr.\n   * @public\n   */\n  get(name, fn) {\n    const res = this.tracker[name];\n    if (res || !fn) return res;\n    this.set(name, fn(name));\n    return this.tracker[name];\n  }\n\n  /**\n   * Store a new Symbol in our managed SVG object.\n   *\n   * @param {String} name Name of the symbol.\n   * @param {Object} data Detailed information about the symbol.\n   * @param {String} data.viewBox The viewBox of the symbol.\n   * @param {String} data.title Title of the symbol.\n   * @param {String} data.desc Description of the symbol.\n   * @param {String} data.shapes The actual symbol that need to be stored.\n   * @returns {Boolean} Indication if the shape was inserted.\n   * @public\n   */\n  sym(name, _ref = {}) {\n    let {\n        viewBox,\n        title,\n        desc,\n        shapes\n      } = _ref,\n      data = _objectWithoutProperties(_ref, _excluded);\n    if (!shapes) return false;\n    const uid = this.uid(name);\n    const a11ytitle = title ? `<title id=\"${uid}-title\">${title}</title>` : '';\n    const a11ydesc = desc ? `<desc id=\"${uid}-desc\">${desc}</desc>` : '';\n    const sym = `<symbol id=\"${uid}\" viewBox=\"${viewBox}\">${a11ytitle}${a11ydesc}${shapes}</symbol>`;\n    this.tracker[name] = _objectSpread(_objectSpread({}, data), {}, {\n      link: `#${uid}`,\n      viewBox,\n      sym\n    });\n    return sym;\n  }\n\n  /**\n   * Gets an HTML ID prefix for a given icon name.\n   *\n   * @param {String} name Name of the icon.\n   * @returns {String} The HTML ID prefix.\n   * @public\n   */\n  uid(name) {\n    return `${this.id}-${name}`;\n  }\n\n  /**\n   * Store a new Symbol in our managed SVG object.\n   *\n   * @param {String} name Name of the symbol.\n   * @param {Object} data Detailed information about the symbol.\n   * @returns {Boolean} Indication if the shape was inserted.\n   * @public\n   */\n  set(name, data) {\n    const sym = this.sym(name, data);\n    if (!sym) return false;\n    if (this.root) {\n      this.mount(this.root);\n      this.root = null;\n    }\n    this.mounted.forEach(({\n      svg\n    }) => {\n      svg.innerHTML += sym;\n    });\n    return true;\n  }\n}\n\n/**\n * The XML namespace.\n *\n * @type {String}\n * @private\n */\nexports.SVGOSM = exports.default = SVGOSM;\nSVGOSM.xmlns = 'http://www.w3.org/2000/svg';\n\n/**\n * Pre-create an instance.\n *\n * @type {SVGOSM}\n * @public\n */\nconst svgosm = new SVGOSM('svg-container');\nexports.svgosm = svgosm;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}